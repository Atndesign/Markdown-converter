{"version":3,"sources":["components/MarkdownInput.js","components/Result.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["MarkdownInput","state","className","value","this","props","markdown","onChange","e","handleMarkdownInput","target","id","cols","rows","load","type","name","href","dlLink","download","onClick","downloadFile","Component","Result","updateHtml","__html","result","dangerouslySetInnerHTML","Main","setState","html","handleConversion","markdownValue","require","Converter","makeHtml","fileBlob","Blob","window","URL","createObjectURL","readfile","console","log","uploaded","files","slice","reader","FileReader","addEventListener","readAsText","alert","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8PA8BeA,E,4MA3BbC,MAAQ,G,uDACE,IAAD,OACP,OACE,yBAAKC,UAAU,YACb,wBAAIA,UAAU,mBAAd,YACA,8BACEC,MAAOC,KAAKC,MAAMC,SAClBC,SAAU,SAACC,GAAD,OAAO,EAAKH,MAAMI,oBAAoBD,EAAEE,OAAOP,QACzDQ,GAAG,GACHC,KAAK,KACLC,KAAK,KACLX,UAAU,mBAEZ,2BAAOK,SAAU,SAACC,GAAD,OAAO,EAAKH,MAAMS,KAAKN,IAAIO,KAAK,OAAOC,KAAK,GAAGL,GAAG,KACnE,uBACET,UAAU,kBACVe,KAAMb,KAAKC,MAAMa,OACjBC,SAAS,cACTC,QAAS,SAACZ,GAAD,OAAO,EAAKH,MAAMgB,iBAJ7B,yB,GAfoBC,aCmBbC,E,4MAlBbtB,MAAQ,G,EAERuB,WAAa,WACX,MAAO,CAAEC,OAAQ,EAAKpB,MAAMqB,S,mEAG5BtB,KAAKoB,e,+BAGL,OACE,yBAAKtB,UAAU,UACb,wBAAIA,UAAU,mBAAd,UACA,yBAAKyB,wBAAyBvB,KAAKoB,oB,GAbtBF,aCsENM,E,kDAnEb,WAAYvB,GAAQ,IAAD,8BACjB,cAAMA,IAMRI,oBAAsB,SAACD,GACrB,EAAKqB,SAAS,CACZvB,SAAUE,EACVsB,KAAM,EAAKC,iBAAiBvB,MAVb,EAcnBuB,iBAAmB,SAACC,GAGlB,OADgB,IADDC,EAAQ,IACMC,YACZC,SAASH,IAjBT,EAoBnBX,aAAe,WACb,IAAIe,EAAW,IAAIC,KAAK,CAAC,EAAKpC,MAAMK,UAAW,CAAES,KAAM,SACvD,EAAKc,SAAS,CACZX,OAAQoB,OAAOC,IAAIC,gBAAgBJ,MAvBpB,EA2BnBK,SAAW,SAACjC,GACVkC,QAAQC,IAAInC,EAAEE,OAAOgB,QACrB,EAAKjB,oBAAoBD,EAAEE,OAAOgB,SA7BjB,EAgCnBZ,KAAO,SAACN,GACN,IAAIoC,EAAWpC,EAAEE,OAAOmC,MAAM,GAC9B,GAAgC,QAA5BD,EAAS5B,KAAK8B,OAAO,GAAc,CACrC,IAAIC,EAAS,IAAIC,WACjBD,EAAOE,iBAAiB,OAAQ,EAAKR,UACrCM,EAAOG,WAAWN,QAElBO,MAAM,uCArCR,EAAKlD,MAAQ,CACXiB,OAAQ,IAHO,E,qDA6CjB,OACE,6BAAShB,UAAU,QACjB,yBAAKA,UAAU,OACb,yBAAKA,UAAU,YACb,kBAAC,EAAD,CACEI,SAAUF,KAAKH,MAAMK,SACrBG,oBAAqBL,KAAKK,oBAC1BsB,iBAAkB3B,KAAK2B,iBACvBV,aAAcjB,KAAKiB,aACnBP,KAAMV,KAAKU,KACXI,OAAQd,KAAKH,MAAMiB,UAGvB,yBAAKhB,UAAU,YACb,kBAAC,EAAD,CAAQwB,OAAQtB,KAAKH,MAAM6B,c,GA5DpBR,aCQJ8B,MARf,WACE,OACE,yBAAKlD,UAAU,OACb,kBAAC,EAAD,QCKcmD,QACW,cAA7Bf,OAAOgB,SAASC,UAEe,UAA7BjB,OAAOgB,SAASC,UAEhBjB,OAAOgB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,a","file":"static/js/main.849b0afb.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass MarkdownInput extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div className=\"markdown\">\r\n        <h2 className=\"markdown__title\">Markdown</h2>\r\n        <textarea\r\n          value={this.props.markdown}\r\n          onChange={(e) => this.props.handleMarkdownInput(e.target.value)}\r\n          id=\"\"\r\n          cols=\"30\"\r\n          rows=\"10\"\r\n          className=\"markdown__text\"\r\n        ></textarea>\r\n        <input onChange={(e) => this.props.load(e)} type=\"file\" name=\"\" id=\"\" />\r\n        <a\r\n          className=\"btn btn-primary\"\r\n          href={this.props.dlLink}\r\n          download=\"Markdown.md\"\r\n          onClick={(e) => this.props.downloadFile()}\r\n        >\r\n          Download MD file\r\n        </a>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MarkdownInput;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Result extends Component {\r\n  state = {};\r\n\r\n  updateHtml = () => {\r\n    return { __html: this.props.result };\r\n  };\r\n  componentDidUpdate() {\r\n    this.updateHtml();\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"result\">\r\n        <h2 className=\"markdown__title\">Result</h2>\r\n        <div dangerouslySetInnerHTML={this.updateHtml()}></div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Result;\r\n","import React, { Component } from \"react\";\r\nimport MarkdownInput from \"./MarkdownInput\";\r\nimport Result from \"./Result\";\r\n\r\nclass Main extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      dlLink: \"\",\r\n    };\r\n  }\r\n\r\n  handleMarkdownInput = (e) => {\r\n    this.setState({\r\n      markdown: e,\r\n      html: this.handleConversion(e),\r\n    });\r\n  };\r\n\r\n  handleConversion = (markdownValue) => {\r\n    let showdown = require(\"showdown\");\r\n    let converter = new showdown.Converter();\r\n    return converter.makeHtml(markdownValue);\r\n  };\r\n\r\n  downloadFile = () => {\r\n    let fileBlob = new Blob([this.state.markdown], { type: \"text\" });\r\n    this.setState({\r\n      dlLink: window.URL.createObjectURL(fileBlob),\r\n    });\r\n  };\r\n\r\n  readfile = (e) => {\r\n    console.log(e.target.result);\r\n    this.handleMarkdownInput(e.target.result);\r\n  };\r\n\r\n  load = (e) => {\r\n    let uploaded = e.target.files[0];\r\n    if (uploaded.name.slice(-3) === \".md\") {\r\n      let reader = new FileReader();\r\n      reader.addEventListener(\"load\", this.readfile);\r\n      reader.readAsText(uploaded);\r\n    } else {\r\n      alert(\"You must load a .md or .txt file! \");\r\n    }\r\n    return;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <section className=\"main\">\r\n        <div className=\"row\">\r\n          <div className=\"col-lg-6\">\r\n            <MarkdownInput\r\n              markdown={this.state.markdown}\r\n              handleMarkdownInput={this.handleMarkdownInput}\r\n              handleConversion={this.handleConversion}\r\n              downloadFile={this.downloadFile}\r\n              load={this.load}\r\n              dlLink={this.state.dlLink}\r\n            />\r\n          </div>\r\n          <div className=\"col-lg-6\">\r\n            <Result result={this.state.html} />\r\n          </div>\r\n        </div>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","import React from \"react\";\nimport \"./assets/css/App.css\";\nimport Main from \"./components/Main\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}